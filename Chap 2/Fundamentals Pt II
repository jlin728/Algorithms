This chapter, we will review basic blocks of programming: conditionals, logic operators, loops and a few techniques. All of the following concepts are used in this chapter:

Variables, functions, for loops, while loops, conditional (if-else) statements, console.log, parameters, return values, Math.random | Math.ceil | Math.floor | Math.trunc

Sigma
  Implement function sigma(num) that given a number, returns the sum of all positive integers up to number (inclusive). Ex.: sigma(3) = 6 (or 1 + 2 + 3 ); sigma(5) = 15 (or 1 + 2 + 3 + 4 + 5 ).

Factorial
Just the Facts, ma’am. Factorials, that is. Write a function factorial(num) that, given a number, returns the product (multiplication) of all positive integers from 1 up to number (inclusive). For example, factorial(3) = 6 (or 1 * 2 * 3 ); factorial(5) = 120 (or 1 * 2 * 3 * 4 * 5 ).

Star Art
  Assume that you have a text field that is exactly 75 characters long. You want to fill it with spaces and asterisks ( '*' ), sometimes called stars . You should print the given number of asterisks consecutively. Depending on which function is called, those stars should be left-justified (first star would be very first char in the text field), or right-justified (last star would be very last char in the text field, with potentially some number of spaces at beginning of text field before the block of stars start), or centered in the 75-character text field (with same number of spaces on either side of the block of stars, plus/minus one).

  Write a function drawLeftStars(num) that accepts a number and prints that many asterisks.

  Write a function drawRightStars(num) that prints 75 characters total. Stars should build from right side. The last num characters should be asterisks; the other 75 should be spaces.
  Write function drawCenteredStars(num) that prints 75 characters total. The stars should be centered in the 75. The middle num characters should be asterisks; the rest of the 75 spaces.

  (optional) Create epic text-art Empire vs. Rebellion battle scenes, with ships like ( =*=) and >o< .

Character Art
From the above, derive the following that accept and draw the given characters, not just asterisks:

  drawLeftChars(num,char) // For all three of these, you
  drawRightChars(num,char) // can safely assume that 'char'
  drawCenteredChars(num,char) // is a string with length 1

Threes and Fives
  Create threesFives() that adds values from 100 and 4000000 (inclusive) if that value is evenly divisible by 3 or 5 but not both . Display the final sum in the console.

  Second: Create betterThreesFives(start,end) that allows you to enter arbitrary start and end values for your range. Think of        threesFives() as betterThreesFives(100,4000000).

Generate Coin Change
  Change is inevitable (especially when breaking a twenty). Make generateCoinChange(cents) . Accept a number of American cents, compute and print how to represent that amount with smallest number of coins. Common American coins are pennies (1 cent), nickels (5 cents), dimes (10 cents), and quarters (25 cents).

  Second: can you simplify/shorten your code?
  Example output, given (94) :
  94 cents can be represented by:
    quarters:3
    dimes:1
    nickels:1
    pennies:4

  Third: add half-dollar (50 cents) and dollar (100 cents) coins with 40 additional characters or less.

Messy Math Mashup
Create a function messyMath(num) that will return the following sum: 
    Add all integers from 0 up to the given num, except for the following special cases of our count value:
      If current count (not num) is evenly divisible by 3, don’t add to sum; skip to the next count;
      Otherwise, if current count is evenly divisible by 7, include it twice in sum instead of once;
      Regardless of the above, if current count is exactly 1/3 of num , return -1 immediately.
        For example, if given num is 4 , return 7 . If given num is 8 , return 34 . If given num is 15 , return -1 .
