function ListNode(value)

{

this.val = value;

this.next = null; }

List: Add Front

Rudy isn’t nice: he cuts in line in front of everyone else. Given a pointer to the first ListNode and a value, create a new node, assign it to the list head, and return a pointer to the new head node.

List: Contains

Sam thinks Tad might be somewhere in a very long line waiting to attend the Superman movie. Given a ListNode pointer and a val, return whether val is found in any node in the list.

List: Remove Front

Ha! Rudy is getting what he deserves – kicked out of line. Given a pointer to the first node in a list, remove the head node and return the new list head node. If list is empty, return null.

SList: Length

July 20, 2013: about 5000 people wait in line for a chance to audition for American Idol. Create a function that accepts a pointer to the first list node, and returns number of nodes in that SList.

SList: Display

Create display(node) for debugging that returns a string containing all list values. Build what you wish console.log(myList) did!

SList: Max

American Idol seems to air singers that are the best , and a few that seem like the worst ! Create function max(node) to return list’s largest val.

SList: Min

Create min(node) to return list’s smallest val.

SList: Average

Create average(node) to return average val.

Over the chapter’s course, we coalesce a considerable collection of concepts to contemplate. Some or all of these will be used in this chapter’s challenges.

classes and objectsobject constructorslocal vars vs. heap allocationspointers reference vs. valueprivate vs. public=== vs. ==push( ) & pop( ) As always, here’s our node object:

function ListNode(value) { this.val = value; this.next = null;

}

SList: Back

Create a function that accepts a ListNode pointer and returns the last value in the list.

SList: Remove Back

Create a standalone function that removes the last ListNode in the list and returns the new list.

SList: Add Back

Create a function that creates a ListNode with given value and inserts it at end of a linked list.

SList: Move Min to Front

Create a standalone function that locates the minimum value in a linked list, and moves that node to the front of the list. Return the new list, with all nodes still present, and all (except for the new head node) in their original order.

SList: Move Max to Back

Create a standalone function that locates the maximum value in a linked list, and moves that node to the back of the list. Return the new list, with all nodes still present, and all in their original order except for the node you moved to the end of the singly linked list.
