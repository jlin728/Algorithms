function ListNode(value)

{

this.val = value;

this.next = null; }

List: Add Front

Rudy isn’t nice: he cuts in line in front of everyone else. Given a pointer to the first ListNode and a value, create a new node, assign it to the list head, and return a pointer to the new head node.

List: Contains

Sam thinks Tad might be somewhere in a very long line waiting to attend the Superman movie. Given a ListNode pointer and a val, return whether val is found in any node in the list.

List: Remove Front

Ha! Rudy is getting what he deserves – kicked out of line. Given a pointer to the first node in a list, remove the head node and return the new list head node. If list is empty, return null.

SList: Length

July 20, 2013: about 5000 people wait in line for a chance to audition for American Idol. Create a function that accepts a pointer to the first list node, and returns number of nodes in that SList.

SList: Display

Create display(node) for debugging that returns a string containing all list values. Build what you wish console.log(myList) did!

SList: Max

American Idol seems to air singers that are the best , and a few that seem like the worst ! Create function max(node) to return list’s largest val.

SList: Min

Create min(node) to return list’s smallest val.

SList: Average

Create average(node) to return average val.

Over the chapter’s course, we coalesce a considerable collection of concepts to contemplate. Some or all of these will be used in this chapter’s challenges.

classes and objectsobject constructorslocal vars vs. heap allocationspointers reference vs. valueprivate vs. public=== vs. ==push( ) & pop( ) As always, here’s our node object:

function ListNode(value) { this.val = value; this.next = null;

}

SList: Back
Create a function that accepts a ListNode pointer and returns the last value in the list.

SList: Remove Back
Create a standalone function that removes the last ListNode in the list and returns the new list.

SList: Add Back
Create a function that creates a ListNode with given value and inserts it at end of a linked list.

SList: Move Min to Front
Create a standalone function that locates the minimum value in a linked list, and moves that node to the front of the list. Return the new list, with all nodes still present, and all (except for the new head node) in their original order.

SList: Move Max to Back
Create a standalone function that locates the maximum value in a linked list, and moves that node to the back of the list. Return the new list, with all nodes still present, and all in their original order except for the node you moved to the end of the singly linked list.

function ListNode(value) {
  this.val = value;
  this.next = null; 
  }

SList: Prepend Val
Create prependVal(ListNode,val,before) to insert a new ListNode with val immediately before the node containing before (or at end, if no node contains before ). Return the new list.

SList: Append Val
Create appendVal(list,val,after) that inserts a new ListNode containing given val immediately after the node containing after (or at end, if after not found). Return the new list.

Create SList (prompt)
Create an SList with values entered. Use the prompt function to gather values one at a time from the user, putting each into a ListNode that you add to the end of the list. When the user hits [Cancel] , return the list you have created.

SList: Remove Val
Create removeVal(ListNode,val) . Given a pointer to the head ListNode , remove the node with the given val . Return the new list. What will you do if val is not found?

Alerts

If you know about prompt() ,you should also know about alert() . Neither are appropriate choices when writing professional web applications, but they may occasionally be useful in our algorithmic challenge context, such as when surfacing a particularly unusual error.

Put simply, alert() accepts a string and raises a dialog displaying that string. The user must click [OK] for the dialog box to be dismissed. The alert() function has no return value. Here’s our ListNode class:

function ListNode(value) {
  this.val = value;
  this.next = null;
  this.front = function() { ... } // more functions here 
  }

SList: Split on Value
Create splitOnVal(list,num) that, given number , splits a list in two. The latter half of the list should be returned, starting with node containing num . E.g.: splitOnVal(5) for the list (1=>3=>5=>2=>4) will change list to (1=>3), and the return value will be (5=>2=>4).

SList: Remove Negatives
Given a pointer to the head node of a singly linked list, remove any nodes containing negative values and return (a pointer to) the new list.

SList: Concat
Given two pointers to separate linked lists, concatenate the second list to the end of the first one, and return the new list.

SList: Partition
Create partition(ListNode,value) that locates the first node with that value, and moves all nodes with values less than that value to be earlier, and all nodes with values greater than that value to be later. Otherwise, original order need not be perfectly preserved. Return the new head ListNode .

SList: Second to Last Value
Create a standalone function that, given a pointer to the first node in a singly linked list, will return the second-to-last value in that list. What will you return if the list is not long enough?

SList: Delete Given Node
Create ListNode method removeSelf() to disconnect (remove) itself from linked lists that include it. Note: the node might be the first in a list (it won’t be the last ), and you do NOT have a pointer to the previous node. Also, don’t lose any subsequent nodes pointed to by .next .

SList: Copy
Given a pointer to a singly linked list, return a copy of that list. Do not return the same list, but instead make a copy of each node in the list and connect them in the same order as the original.

SList: Filter
Given a headNode ,a lowVal and a highVal , remove from the list any nodes that have values less than lowVal or higher than highVal . Return the new list.

SList: Second Largest Value
Given a pointer to the first node in a singly linked list, return the second-largest value contained in the list.

Zip SLists
Provided two pointers to independent linked lists, ‘zip’ the two lists together by alternating nodes. Start with the first list, and return the new combined list.

Dedupe SList
Remove nodes with duplicate values. Following this call, all remaining nodes should have unique values. Retain only first instance of each value.

Dedupe SList Without Buffer
Can you accomplish deduplication without using a secondary buffer? What are the performance ramifications? How long would you expect the function to take to finish, if it was sent an SList of length 5 million?

Weekend Challenge: Linked Lists

This weekend, create an SList with nodes containing .id , .firstName and .lastName in addition to the obligatory .next . After creating SList and SLNode constructors, write code to do the following:

Create a list and at least five unique nodes, and add the nodes to the list.

Build a function that reorders list nodes to be alphabetized by .lastName .
Refactor this code to accept a boolean, representing whether to sort ascending or descending .
Now, augment the code to sort by any of these attributes, as well as ascending or descending.

Refactor the function to sort by more than one attribute. For example, we may want to “Sort the list by last name (ascending), using ID (descending) as a tiebreaker if last names are equal.”
Is any of this challenge easier if our nodes contain a .prev in addition to a .next ?

The “Buggy 13” (#1)
Below are submissions for the “Basic 13” challenges. Unfortunately, some of these contain errors. Which solutions have bugs, what are they, and how would you fix them?

Print1To255()
Print all the integers from 1 to 255.

function print1to255()
{ var num= 1; while (num < 255) {
console.log(num); num= num + 1; } }

PrintIntsAndSum0To255()
Print integers from 0 to 255, and the sum so far.

function printIntsAndSum0to255()
{ var sum= 0; for(var num= 0;num <= 255;num++) { sum += num; } return sum;
}

PrintMaxOfArray(arr)
Print the largest element in a given array.
function printMaxOfArray(arr) {
if (arr.length == 0) { console.log("[], no max val.") ; return ;
} var max = 0 ; for (var idx = 0 ;
idx < arr.length; idx++) { if (arr[idx] > max ) { max = arr[idx]; }
}
console.log("Max val is:", max); }

PrintOdds1To255()
Print all odd integers from 1 to 255.

function printOdds1to255()
{ var num= 1; while (num <= 255) {
console.log(num + 2); } }

PrintArrayVals(arr)
Print all values in a given array.
function printArrayVals(arr) { for var idx = 0;idx < arr.length; arr++) { console.log("array[", idx, "] =",arr[idx]); } }

PrintAverageOfArray(arr)
Analyze an array’s values and print the average.

arr= [1,4,7,2,5,8];
if (arr.length == 0) { console.log("[ ], no avg val."); return;
}

var sum= arr[0];
for (var idx=1;idx<arr.length;idx++) { sum += arr[idx];
}
console.log("Avg val:", sum/arr.length);

The “Bug-Ridden 13” (#1) – continued
(continued)

ReturnOddsArray1To255()
Create & return array with odd integers 1-255.
function returnOddsArray1to255() { var oddArray = []; for (var num=1; num<=255; num+=2) { oddArray.push(num); }
}

ReturnArrayCountGreaterThanY(arr, y)
Given an array, return count greater than Y.
function countGreaterThanY(arr, y) { var numGreater= 0; for(var idx = 0;
idx < arr.length; idx++) { if (arr[idx] > y ) { numGreater++; }
} return arr[y]; }

PrintMaxMinAverageArrayVals(arr)
Print the max, min and average array values.
function printMaxMinAverage(arr) { if (arr.length == 0) { return; } var min= arr[0]; var max = arr[0]; var sum= arr[0]; for (var idx = 1;
idx <= arr.length; idx++) { if (arr[idx] < min ) { min= arr[idx]; } if (arr[idx] > max ) { max = arr[idx]; } sum += arr[idx] ;
} return min ; return max ; return avg ;
}

SquareArrayVals(arr)

Given an array, square each value in the array.
function squareArrVals(arr) { for ( var idx = 0; idx < arr.length; idx++){ arr[idx] = arr[idx] + arr[idx]; } }

ZeroOutArrayNegativeVals(arr)
Given an array, set negative values to zero.

zeroOutArrayNegativeVals(arr) { for ( var idx=0; idx<arr.length; idx++){ if (arr[idx]<0) { arr[idx]=0; } } }

ShiftArrayValsLeft(arr)
Shift array values forward, leaving '0' at end.
function shiftArrayValsLeft(arr) { for(var ix=1;ix<arr.length;ix++){
arr[ix - 1] = arr[ix] ; } arr.length-- ; return arr ;
}

SwapStringForArrayNegativeVals(arr)
Replace negative array values with 'Dojo' .
function swapStringForArrNegs(arr){ for (var idx = 0; idx<arr.length;
idx++) { if(idx < 0) { arr[idx]="Dojo" } } return arr ;
}
